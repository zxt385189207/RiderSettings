<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="566" />
    <option name="newTranslationDialogWidth" value="884" />
    <option name="newTranslationDialogX" value="552" />
    <option name="newTranslationDialogY" value="762" />
    <option name="pinTranslationDialog" value="true" />
    <histories>
      <item value="Stereo" />
      <item value="This is the last data index showing in the scroller's visible area" />
      <item value="set up a single data item containing the spacer this pushes the cells down to the bottom" />
      <item value="The linear velocity is the velocity on one axis. The scroller should only be moving one one axix." />
      <item value="Whether the scroller is scrolling or not" />
      <item value="This is the velocity of the scroller." />
      <item value="Whether the scroller should process loop jumping while being dragged. Note: if this is turned off while using a small list size, you may see elements missing while dragging near the edges of the list. Turning this value off can sometimes help with Unity adding a lot of velocity while dragging near the end of a list that loops. If this value is turned off, you can mitigate the large inertial velocity by setting the maxVelocity value to a non-zero amount (see maxVelocity)." />
      <item value="pass in a reference to our data set with the offset for this cell" />
      <item value="This tells the scroller the number of cells that should have room allocated. For this example, the count is the number of data elements divided by the number of cells per row (rounded up using Mathf.CeilToInt)" />
      <item value="1) The scroller is told the data count is the number of data elements divided by the number of cells per row 2) The cell view is passed a reference to the data set with the offset index of the first cell in the row" />
      <item value="if the sub cell is outside the bounds of the data, we pass null to the sub cell" />
      <item value="loop through the sub cells to display their data (or disable them if they are outside the bounds of the data" />
      <item value="set the text if the cell is inside the data range" />
      <item value="this cell was outside the range of the data, so we disable the container. Note: We could have disable the cell gameobject instead of a child container, but that can cause problems if you are trying to get components (disabled objects are ignored)." />
      <item value="This member tells the scroller that we need the cell views to figure out how much space to use. This is only set to true on the first pass to reduce processing required." />
      <item value="Second Pass: reload the data once more with the newly set cell view sizes and scroller content size" />
      <item value="his function will expand the scroller to accommodate the cells, reload the data to calculate the cell sizes, reset the scroller's size back, then reload the data once more to display the cells." />
      <item value="This value will store the position of the detail scroller to be used when the scroller's cell view is recycled" />
      <item value="scroller needs reloaded, so we unflag and reload the detail data" />
      <item value="The percentage of the scroller to start at between 0 and 1, 0 being the start of the scroller" />
      <item value="Cached reference to the layout group that handles view positioning" />
      <item value="tell the scroller to reload now that we have the data" />
      <item value="add the size of this cell based on what the delegate tells us to use. Also add spacing if this cell isn't the first one" />
      <item value="set the name of the game object to the cell's data index. this is optional, but it helps up debug the objects in the scene hierarchy." />
      <item value="first, we get a cell from the scroller by passing a prefab. if the scroller finds one it can recycle it will do so, otherwise it will create a new cell." />
      <item value="in this example, even numbered cells are 30 pixels tall, odd numbered cells are 100 pixels tall for the vertical scroller the horizontal scroller has a fixed cell size of 200 pixels" />
      <item value="This tells the scroller what the size of a given cell will be. Cells can be any size and do not have to be uniform. For vertical scrollers the cell size will be the height. For horizontal scrollers the cell size will be the width." />
      <item value="Jump to a position in the scroller based on a dataIndex. This overload allows you to specify a specific offset within a cell as well. &lt;summary&gt; &lt;param name=&quot;dataIndex&quot;&gt;he data index to jump to&lt;param&gt; &lt;param name=&quot;scrollerOffset&quot;&gt;The offset from the start (top left) of the scroller in the range 0..1. Outside this range will jump to the location before or after the scroller's viewable area&lt;param&gt; &lt;param name=&quot;cellOffset&quot;&gt;The offset from the start (top left) of the cell in the range 0..1&lt;param&gt; &lt;param name=&quot;useSpacing&quot;&gt;Whether to calculate in the spacing of the scroller in the jump&lt;param&gt; &lt;param name=&quot;tweenType&quot;&gt;What easing to use for the jump&lt;param&gt; &lt;param name=&quot;tweenTime&quot;&gt;How long to interpolate to the jump point&lt;param&gt; &lt;param name=&quot;jumpComplete&quot;&gt;This delegate is fired when the jump completes&lt;param&gt;" />
      <item value="In this example we are going to use a standard generic List. We could have used a SmallList for efficiency, but this is just a demonstration that other list types can be used." />
      <item value="the" />
      <item value="this demo shows how to jump to an index in the scroller. you can jump to a position before or after the cell. you can also include the spacing before or after the cell." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="31" />
        <entry key="ENGLISH" value="32" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1669012306118" />
  </component>
  <component name="Translation.Cache">
    <option name="lastTrimTime" value="1739364136320" />
  </component>
  <component name="Translation.Settings">
    <option name="primaryLanguage" value="JAPANESE" />
    <option name="showReplacementActionInContextMenu" value="true" />
    <option name="showWordsOnStartup" value="true" />
    <option name="targetLanguageSelection" value="LAST" />
    <option name="translateDocumentation" value="true" />
    <option name="translator" value="MICROSOFT" />
  </component>
  <component name="Translation.States">
    <option name="newTranslationDialogWidth" value="770" />
    <option name="newTranslationDialogX" value="823" />
    <option name="newTranslationDialogY" value="450" />
    <histories>
      <item value="Live Listが便利" />
      <item value="ラムダ式から外部変数をキャプチャさせない" />
      <item value="Unityの挙動とは独立した時間計測 Unityが動作を停止していた場合でも時間が進む" />
      <item value="Time.scaleの影響を受けないが、 Unityが動作を停止していた場合は時間が進まない" />
      <item value="Time.scaleの影響を受ける Unityが動作を停止していた場合は時間が進まない" />
      <item value="Fixed Updateと同じタイミングで実行される" />
      <item value="Observable.EveryUpdateは一定のフレーム間隔でメッセージを発行する どのフレームタイミングでメッセージ発行するかを指定できる" />
      <item value="スペースキーが押されている間、一定間隔で弾を打つ" />
      <item value="テスト対象" />
      <item value="Publish()した値を一定時間後に出力するだけのObservable" />
      <item value="AwaitOperation.Switchは非同期処理中に次のメッセージが来たら 今実行中の非同期処理をキャンセルして新しい非同期処理を開始する" />
      <item value="衝突したら３秒間無敵フラグをTrueにする 無敵中に再衝突した場合はそこからまた３秒数える" />
      <item value="configure AwaitをTrueにすること" />
      <item value="ラムダ式で待ち受け。ただこれだとキャンセルができない" />
      <item value="とだいたい同じ" />
      <item value="と同じ" />
      <item value="OnNext(100) + OnCompleted()と同じ" />
      <item value="Uni Task Completion SourceをAsync Subjectの代わりに使ってみる" />
      <item value="非同期処理実行中はゲートを閉める" />
      <item value="ボタンBが押されたときの処理" />
      <item value="なにか各種非同期な処理があったとする" />
      <item value="非同期処理にゲートを連動させる" />
      <item value="ボタンAが押されたときの処理" />
      <item value="状態を可視化する" />
      <item value="ゲートがfalseのときはボタンを押せない状態にする" />
      <item value="状態表示用のテキスト" />
      <item value="ボタン制御用のReactive Property（ゲート）" />
      <item value="各種ボタン" />
      <item value="Observableの寿命をこのMono Behaviourに紐付ける" />
      <item value="child Objectに紐づいたOn Collision EnterをObservableとして取得" />
      <item value="negative" />
      <item value="Grade Param Data" />
      <item value="Set the sleep timeout to whatever the user has specified in the system settings" />
      <item value="Utility" />
      <item value="Interprets the state machine." />
      <item value="uploading Traffic Light Health" />
      <item value="wait for delay pass token if this timeout is canceled by another service invokation NOTE!: if delay got canceled, the exception is thrown, hence we use .ContinueWith(...) to rid off unnecessary exception here." />
      <item value="make sure we have cancelation token to react on we need to have new cancelation token for each service execution" />
      <item value="Internal list of transitions." />
      <item value="Actions invoked on state exit after all services has finished." />
      <item value="Actions invoked on state enter before all services has started. Services are not executed until all enter actions are finalized." />
      <item value="Internal list of activities to run in parallel to services." />
      <item value="Stores the chain of clean up activities to execute on state exit." />
      <item value="Service selegates to run async." />
      <item value="The one state of the state machine." />
      <item value="This class is responsible for managing the transitions between scenes that are performed in the game via a classic fade tofrom black." />
      <item value="Clamped" />
      <item value="Elastic" />
      <item value="[LoadingScreenPro] No scene with buildindex &quot; + levelNum + &quot; found" />
      <item value="Is Legal Level Index" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="50" />
        <entry key="ENGLISH" value="49" />
        <entry key="FRENCH" value="1" />
        <entry key="JAPANESE" value="34" />
      </map>
    </option>
  </component>
</application>